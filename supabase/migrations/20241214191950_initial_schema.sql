-- Migration generated by https://database.build/db/3446kl54yxge6ru7

create table game_boards (
  id uuid default gen_random_uuid () primary key,
  name text not null,
  dimensions text not null,
  rules text not null,
  current_state text not null,
  version int not null default 1,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  constraint version_check check (version > 0)
);

create table user_participation (
  id uuid default gen_random_uuid () primary key,
  user_id uuid not null,
  board_id uuid not null references game_boards (id) on delete cascade,
  cursor_position text,
  contributions text,
  session_id uuid,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table pattern_evolution (
  id uuid default gen_random_uuid () primary key,
  board_id uuid not null references game_boards (id) on delete cascade,
  pattern text not null,
  frequency int not null default 0,
  ai_suggestions text,
  performance_metrics text,
  evolution_history text,
  created_at timestamptz default now(),
  updated_at timestamptz default now(),
  constraint frequency_check check (frequency >= 0)
);

create table scheduled_events (
  id uuid default gen_random_uuid () primary key,
  board_id uuid not null references game_boards (id) on delete cascade,
  event_type text not null,
  effects text,
  outcomes text,
  event_history text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table analytics (
  id uuid default gen_random_uuid () primary key,
  board_id uuid not null references game_boards (id) on delete cascade,
  activity_metrics text,
  performance_data text,
  user_engagement text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

alter table game_boards enable row level security;

alter table user_participation enable row level security;

alter table pattern_evolution enable row level security;

alter table scheduled_events enable row level security;

alter table analytics enable row level security;

create
or replace function update_updated_at_column () returns trigger as $$
BEGIN
   NEW.updated_at = now();
   RETURN NEW;
END;
$$ language plpgsql;

create trigger update_game_boards_updated_at before
update on game_boards for each row
execute function update_updated_at_column ();

create trigger update_user_participation_updated_at before
update on user_participation for each row
execute function update_updated_at_column ();

create trigger update_pattern_evolution_updated_at before
update on pattern_evolution for each row
execute function update_updated_at_column ();

create trigger update_scheduled_events_updated_at before
update on scheduled_events for each row
execute function update_updated_at_column ();

create trigger update_analytics_updated_at before
update on analytics for each row
execute function update_updated_at_column ();

do $$
BEGIN
   IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'authenticated_user') THEN
      CREATE ROLE authenticated_user;
   END IF;
   IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'anonymous_user') THEN
      CREATE ROLE anonymous_user;
   END IF;
END $$;

grant usage on schema public to authenticated_user;

grant
select
  on all tables in schema public to authenticated_user;

grant insert,
update,
delete on all tables in schema public to authenticated_user;

-- Security Policies
-- Game Boards

--     Authenticated User: Can view and update game boards they are participating in.
--     Anonymous User: No access.

-- Game Boards RLS Policies

CREATE POLICY select_game_boards ON game_boards

    FOR SELECT

    USING (EXISTS (

        SELECT 1 FROM user_participation

        WHERE user_participation.user_id = current_user::uuid

        AND user_participation.board_id = game_boards.id

    ));


CREATE POLICY update_game_boards ON game_boards

    FOR UPDATE

    USING (EXISTS (

        SELECT 1 FROM user_participation

        WHERE user_participation.user_id = current_user::uuid

        AND user_participation.board_id = game_boards.id

    ));

-- User Participation

--     Authenticated User: Can view and update their own participation records.
--     Anonymous User: No access.

-- User Participation RLS Policies

CREATE POLICY select_user_participation ON user_participation

    FOR SELECT

    USING (user_id = current_user::uuid);


CREATE POLICY update_user_participation ON user_participation

    FOR UPDATE

    USING (user_id = current_user::uuid);

-- Pattern Evolution

--     Authenticated User: Can view and update patterns related to boards they are participating in.
--     Anonymous User: No access.

-- Pattern Evolution RLS Policies

CREATE POLICY select_pattern_evolution ON pattern_evolution

    FOR SELECT

    USING (EXISTS (

        SELECT 1 FROM user_participation

        WHERE user_participation.user_id = current_user::uuid

        AND user_participation.board_id = pattern_evolution.board_id

    ));


CREATE POLICY update_pattern_evolution ON pattern_evolution

    FOR UPDATE

    USING (EXISTS (

        SELECT 1 FROM user_participation

        WHERE user_participation.user_id = current_user::uuid

        AND user_participation.board_id = pattern_evolution.board_id

    ));

-- Scheduled Events

--     Authenticated User: Can view and update events related to boards they are participating in.
--     Anonymous User: No access.

-- Scheduled Events RLS Policies

CREATE POLICY select_scheduled_events ON scheduled_events

    FOR SELECT

    USING (EXISTS (

        SELECT 1 FROM user_participation

        WHERE user_participation.user_id = current_user::uuid

        AND user_participation.board_id = scheduled_events.board_id

    ));


CREATE POLICY update_scheduled_events ON scheduled_events

    FOR UPDATE

    USING (EXISTS (

        SELECT 1 FROM user_participation

        WHERE user_participation.user_id = current_user::uuid

        AND user_participation.board_id = scheduled_events.board_id

    ));

-- Analytics

--     Authenticated User: Can view analytics related to boards they are participating in.
--     Anonymous User: No access.

-- Analytics RLS Policies

CREATE POLICY select_analytics ON analytics

    FOR SELECT

    USING (EXISTS (

        SELECT 1 FROM user_participation

        WHERE user_participation.user_id = current_user::uuid

        AND user_participation.board_id = analytics.board_id

    ));